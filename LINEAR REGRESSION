# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# For reproducibility
np.random.seed(42)

# Load your dataset (corrected file path)
df = pd.read_csv(r"C:\Users\Muneedra\Downloads\insurance.csv")

# Display the first few rows of the dataframe
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Handle missing values if any (example: df.fillna(method='ffill', inplace=True))
# Uncomment and modify the below line as per your dataset's requirements
# df.fillna(method='ffill', inplace=True)

# Encode categorical variables
# Assuming 'sex' and 'smoker' are categorical variables
if 'sex' in df.columns:
    df['sex'] = df['sex'].map({'male': 0, 'female': 1})
if 'smoker' in df.columns:
    df['smoker'] = df['smoker'].map({'yes': 1, 'no': 0})
if 'region' in df.columns:
    df = pd.get_dummies(df, columns=['region'], drop_first=True)

# Split data into features and target variable
# Assuming 'charges' is the target variable
X = df.drop('charges', axis=1)
y = df['charges']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the model
model = LinearRegression()

# Fit the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate performance metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'MAE: {mae}')
print(f'MSE: {mse}')
print(f'RMSE: {rmse}')
print(f'R2 Score: {r2}')

# Plotting the results
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', edgecolor='w', linewidth=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted Charges')
plt.show()

# Residuals plot
plt.figure(figsize=(10, 6))
sns.residplot(x=y_test, y=y_pred, color='blue', line_kws={'color': 'red', 'lw': 2})
plt.xlabel('Actual Charges')
plt.ylabel('Residuals')
plt.title('Residuals vs Actual Charges')
plt.show()
